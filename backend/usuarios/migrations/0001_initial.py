# Generated by Django 5.0.6 on 2024-05-14 15:28

import django.core.validators
import re
import usuarios.managers
import usuarios.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="endereço de email"
                    ),
                ),
                (
                    "nome_completo",
                    models.CharField(max_length=255, verbose_name="nome"),
                ),
                (
                    "cpf",
                    models.CharField(
                        max_length=14,
                        unique=True,
                        validators=[
                            usuarios.validators.eh_valido_cpf,
                            django.core.validators.RegexValidator(
                                re.compile(
                                    "^[0-9]{3}\\.[0-9]{3}\\.[0-9]{3}\\-[0-9]{2}$"
                                ),
                                "CPF não está no padrão exigido",
                                "invalid",
                            ),
                        ],
                        verbose_name="CPF",
                    ),
                ),
                (
                    "data_nascimento",
                    models.DateField(validators=[usuarios.validators.eh_de_maior]),
                ),
                (
                    "telefone",
                    models.CharField(
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile(
                                    "^\\(?[0-9]{2}\\)?[\\s]?[9]?[0-9]{4}[-]?[0-9]{4}$"
                                ),
                                " Número telefone inválido",
                            )
                        ],
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(auto_now_add=True, verbose_name="date joined"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="active")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
            managers=[
                ("objects", usuarios.managers.CustomUserManager()),
            ],
        ),
    ]
